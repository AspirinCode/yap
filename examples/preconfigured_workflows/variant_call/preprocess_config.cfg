#Preprocess configuration file
#General rules->
# In order to include the command in the analysis, set "execute_command" option to 'yes'.  
#If set to "no" command and its parameters will not be taken into consideration. 
#All paths should be in double quotes 
#No spaces/blanks  between file names
#YAP takes input as pipe . pipe1 represents single input stream. dont change the value(pipe1)

#fastqc - aims to provide a simple way to do some quality control checks on raw sequence data
:begin
"execute_command" := "yes"
"command_name" := "../../packages/fastqc/0.10.1/fastqc"
"" := "--outdir output_directory --extract  --threads 12" 
:end

#fastq screen - allows you to screen a library of sequences in FastQ format against a set of sequence databases so you can see if the composition of the library matches
:begin
"execute_command" := "yes"
"command_name" := " ../../packages/FastQScreen/v0.4.1/fastq_screen"
"" := "--subset 500000 --paired --outdir output_directory --conf fastq_screen_v0.4.1.conf --aligner bowtie" 
:end

#fastx_clipper - for clipping sequences provided in FASTA/FASTQ fileformat based on ADAPTER or contaminants.
:begin
"execute_command" := "no"
"command_name" := "../../packages/fastx-toolkit/0.0.13/fastx_clipper"
"contaminants_file ":= "contaminants_sample_file" # options :"no" or provide text file with contaminants (eg:contaminants_sample_file)
"" := "-C -M 51 -i pipe1"       
:end      

#fastx_quality_filter-Filters sequences based on quality
:begin
"execute_command" := "no"
"command_name" := "../../packages/fastx-toolkit/0.0.13/fastq_quality_filter"
"" := "-q 20 -p 70 -i pipe1"        
:end

#fastq_quality_trimmer-Trims (cuts) sequences based on quality
:begin
"execute_command" := "no"
"command_name" := "../../packages/fastx-toolkit/0.0.13/fastq_quality_trimmer" 
"" := "-t 2 -i pipe1" 
:end
